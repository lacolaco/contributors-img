name: 'Deploy (production)'

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: 'Git ref to deploy (e.g. main, v1.0.0, c91ee3c, etc.)'
        required: true
    secrets:
      GH_AUTH_TOKEN:
        required: true
  workflow_dispatch:
    inputs:
      ref:
        type: string
        description: 'Git ref to deploy (e.g. main, v1.0.0, c91ee3c, etc.)'
        required: true

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  install-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - uses: ./.github/actions/setup-go

  deploy-api:
    environment: production
    runs-on: ubuntu-latest
    needs: [install-deps]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ vars.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GOOGLE_DEPLOY_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: ./.github/actions/setup-go
      - uses: imjasonh/setup-ko@v0.7
        env:
          KO_DOCKER_REPO: us-central1-docker.pkg.dev/${{ steps.auth.outputs.project_id }}/cloud-run-builds
      - name: Build Docker image of api
        id: 'build-api'
        run: echo "::set-output name=image::$(ko build ./apps/api)"
      - name: Deploy to Cloud Run (api)
        run: |
          gcloud --quiet beta run deploy ${{ vars.CLOUD_RUN_SERVICE_NAME_API }} \
          --image ${{ steps.build-api.outputs.image }} \
          --labels environment=production \
          --service-account ${{ vars.CLOUD_RUN_SERVICE_ACCOUNT }} \
          --execution-environment gen1 --region us-central1 --platform managed --memory 512Mi --allow-unauthenticated \
          --set-env-vars GITHUB_AUTH_TOKEN="${{ secrets.GH_AUTH_TOKEN }}" \
          --set-env-vars CACHE_STORAGE_BUCKET="${{ vars.APP_CACHE_BUCKET }}" \
          --set-env-vars APP_ENV="production"

  deploy-worker:
    environment: production
    runs-on: ubuntu-latest
    needs: [install-deps]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ vars.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GOOGLE_DEPLOY_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm build worker
      - name: Deploy to Cloud Run (worker)
        run: |
          gcloud --quiet run deploy ${{ vars.CLOUD_RUN_SERVICE_NAME_WORKER }} \
          --source ./apps/worker \
          --labels environment=production \
          --service-account ${{ vars.CLOUD_RUN_SERVICE_ACCOUNT }} \
          --region us-central1 --platform managed --memory 512Mi \
          --set-env-vars APP_ENV="production"

  deploy-webapp:
    environment: production
    runs-on: ubuntu-latest
    needs: [deploy-api]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ vars.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GOOGLE_DEPLOY_SERVICE_ACCOUNT }}
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm build:all:production
      - name: Deploy webapp to Firebase
        run: pnpm firebase deploy --project=${{ steps.auth.outputs.project_id }} --only=hosting:production,firestore
